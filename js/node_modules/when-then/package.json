{
  "name": "when-then",
  "description": "Simple helper for executing functions only after others have completed.",
  "tags": [
    "http",
    "simple",
    "util",
    "utility",
    "async"
  ],
  "version": "0.0.2",
  "author": {
    "name": "Max Thayer",
    "email": "garbados@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/garbados/when-then.git"
  },
  "bugs": {
    "url": "http://github.com/garbados/when-then/issues"
  },
  "engines": [
    "node >= 0.3.6"
  ],
  "main": "./main",
  "dependencies": {},
  "bundleDependencies": [],
  "scripts": {
    "test": "node tests/run.js"
  },
  "readme": "# When-Then\n\nSimple helper for executing functions only after others have completed. Inspired by [this StackOverflow thread](http://stackoverflow.com/questions/11278018/how-to-execute-a-javascript-function-only-after-multiple-other-functions-have-co).\n\n# Install\n\nIn terminal:\n\n\tnpm install when-then\n\n# Usage\n\nIn your JavaScript:\n\n\tvar when = require('when-then');\n\n\twhen([func1, func2, func3]).then(callback);\n\n`when` takes a list of functions, which it executes internally with a callback as its only parameter. This callback takes no arguments, and is used by `when` internally to determine when functions have completed. `then` executes once all of those functions have completed. A more realistic use-case might look like this:\n\n\tvar when = require('when-then')\n\t  , twitter_handles = [...]\n\t  , data_about_handles = []\n\t  , function_list = [];\n\n\tvar get_handle_data = function(handle) {\n\t\treturn function(cb) {\n\t\t\tasync_twitter_function(function(results){\n\t\t\t\tdata_about_handles.push(results);\n\t\t\t\tcb();\n\t\t\t});\n\t\t}\n\t}\n\n\tfor(var i = 0; i < twitter_handles.length; i++) {\n\t\tfunction_list.push(get_handle_data(twitter_handles[i]));\n\t}\n\n\twhen(function_list).then(function() {\n\t\t// do something with data_about_handles\n\t});\n\nIn the above example, we generate functions for everything we want to accomplish, push it to a list of functions, and then use `when` to execute them all. We store the data returned by our function list in a variable that is then available to our `then` callback.\n\n# Tests\n\nTo run tests, install the library, and then run:\n\n\tnpm test when-then",
  "readmeFilename": "README.md",
  "_id": "when-then@0.0.2",
  "dist": {
    "shasum": "7baf4f412364d6391e4c0b7b56c78acfd4f12c2c",
    "tarball": "http://registry.npmjs.org/when-then/-/when-then-0.0.2.tgz"
  },
  "_npmVersion": "1.2.0",
  "_npmUser": {
    "name": "garbados",
    "email": "garbados@gmail.com"
  },
  "maintainers": [
    {
      "name": "garbados",
      "email": "garbados@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "7baf4f412364d6391e4c0b7b56c78acfd4f12c2c",
  "_from": "when-then@0.0.2",
  "_resolved": "https://registry.npmjs.org/when-then/-/when-then-0.0.2.tgz"
}
